Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-12-05T15:08:45+00:00

====== APT Package Preparation Using git-buildpackage ======
Updated Monday 24 July 2023

===== Initial Setup =====
1. Create a git repo on hermes in the usual way but use:-
	1. sudo git init--bare --initial-branch=upstream/latest
2. Create the local git working copy.
	1. git init --initial-branch=upstream/latest
3. Download a tarball
	1. Choose a tag common to all interesting branches (master, v1.6.y etc)
	2. Sownload the tarball
	3. Either a or b
		a. Change the name from libmgec-1.6.4.tar.gz to libmgec_1.6.4.orig.tar.gz
		b. ln -s libmgec-1.6.4.tar.gz libmgec_1.6.4.orig.tar.gz
4. Import the tarball.
	1. gbp import-orig --debian-branch=debian/bullseye --upstream-branch=upstream/latest ../libmgec_1.6.4.orig.tar.gz
5. Add upstream remote.
	1. git remote add upstream git@github.com:m-grant-prg/libmgec
6. Create branches.
	1. git switch -c upstream/latest
	2. git switch -c upstream/v1.6.y
	3. git switch -c debian/v1.6.y
	4. etc
7. Fetch upstream.
	1. git fetch upstream
8. If upstream does not have gitignore etc
	1. Copy the files in.
	2. Replace .git/info/exclude with a file similar to [[./exclude|this]]
9. Setup origin
	1. git remote add origin
	2. git push
	3. set tracking as suggested.
10. Setup LaunchPad
	a. git remote add lp
	b. git push lp
11. Setup GitHub
	a. git remote add github
	b. Get on github, settings, branches and set default branch as upstream/latest
	c. git push github
12. Add the debian directory to debian branches
	a. Copy in the directory.
	b. Check changelog
	c. Add gbp.conf
	d. Check watch file.
	e. git add .
	f. git commit -as
	g. gbp tag
13. Git pushes etc. Remember pristine-tar

===== New upstream release =====
1. git fetch upstream
2. If you have patches against upstream.
	1. gbp pq import
3. Get the tarball and import
	1. gbp import-orig --uscan  --upstream-vcs-tag=v1.6.6
		1. Note. Above seems to need the vcs-tag to import the history.
		2. If this suggests a tag not in your branch since branches have diverged DO NOT PROCEED. Follow this:-
			1. Either
				a. uscan --download-version=1.6.6
				b. gbp import-orig  --upstream-vcs-tag=v1.6.6 ../libmgec2_1.6.6.orig.tar.gz
			2. Or
				a. gbp import-orig --uscan  --upstream-vcs-tag=v1.6.6 --upstream-version=1.6.6
				b. If above fails probably with more than 1 upstream tarball found then it should have downloaded the tarball so do:-
					1. gbp import-orig  --upstream-vcs-tag=v1.6.6 ../libmgec2_1.6.6.orig.tar.gz
4. If you have patches against upstream.
	1. gbp pq rebase
	2. gbp pq export
	3. If not set in ~/.gbp.conf
		1. gbp pq drop
	4. git add debian/patches
	5. git commit -as
5. Sort the changelog. Either 1 or 2 then ...
	1. dch -v --version= // New version number eg 1.7.4-1+deb11u1
	2. dch -i --increment // Increment the Debian release number
	3. Edit changelog
	4. dch -r --release // Change Distribution from UNRELEASED
6. git commit -as as v1.6.6-1+deb11u1
7. gbp tag
8. Test build
	a. brz builddeb -S
	b. pbuilder build
9. git pushes etc. Remember pristine-tar

===== Create a new packaging branch sharing upstream/latest =====
1. git switch upstream/latest
2. git switch -c debian/latest
3. Add the Debian packaging directory
4. Add [[./gbp.conf|debian/gbp.conf]] (Ubuntu version shown, Debian does not need the tag).
5. git add .
6. git commit -as
7. gbp tag
8. git pushes and tag pushes.

===== New upstream release for branch sharing upstream/latest =====
1. If you have patches against upstream.
	1. gbp pq import
2. Get the new upstream version.
	1. gbp import-ref --upstream-version=1.6.6 (This reads as upstream tag upstream/1.6.6)
3. If you have patches against upstream.
	1. gbp pq rebase
	2. gbp pq export
	3. git add debian/patches
	4. git commit -as
4. Sort the changelog. Either 1 or 2 then ...
	1. dch -v --version= // New version number eg 1.7.4-1+deb11u1
	2. dch -i --increment // Increment the Debian release number
	3. Edit changelog
	4. dch -r --release // Change Distribution from UNRELEASED
5. git commit -as as v1.6.6-1ubuntu22.04u1
6. gbp tag
7. Test build
	a. brz builddeb -S
	b. pbuilder build
8. git pushes etc
